<Window x:Class="VNDBUpdater.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:local="clr-namespace:VNDBUpdater.ViewModels"
        xmlns:converters="clr-namespace:VNDBUpdater.ValueConverters"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        x:Name="MainView"
        Title="{Binding Path=Title}" Height="{Binding Height, Mode=TwoWay}" Width="{Binding Width, Mode=TwoWay}" WindowStartupLocation="CenterScreen"
        Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}">

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding Commands.CloseWindow}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="StateChanged">
            <i:InvokeCommandAction Command="{Binding Commands.StateChanged}" CommandParameter="{Binding ElementName=MainView}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="SizeChanged">
            <i:InvokeCommandAction Command="{Binding Commands.Resized}" CommandParameter="{Binding ElementName=MainView}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.Resources>
        <Style x:Key="ContextMenuItemStyle">
            <Setter Property="MenuItem.Header" Value="{Binding Header}" />
            <Setter Property="MenuItem.ItemsSource" Value="{Binding Children}" />
            <Setter Property="MenuItem.Command" Value="{Binding Command}" />
            <Setter Property="MenuItem.CommandParameter" Value="{Binding CommandParameter}"/>
        </Style>
        <Style x:Key="NoChromeButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter Property="Opacity" TargetName="Chrome" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
            <Setter Property="Grid.ColumnSpan" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                        <Grid>
                            <DataGridColumnHeader IsHitTestVisible="False" Name="PART_FillerColumnHeader"/>
                            <ItemsPresenter/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <converters:TraitsListConverter x:Key="TraitsListToStringConvert" />
        <converters:AliasesConverter x:Key="AliasesConverter" />
        <converters:PlayTimeConverter x:Key="PlayTimeConverter" />
        <converters:RelationsConverter x:Key="RelationsConverter" />
        <local:MainViewModel x:Key="MainViewM" />
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250*" />
            <ColumnDefinition Width="150*" />
            <ColumnDefinition Width="200*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="20*" MaxHeight="20" MinHeight="20"/>
            <RowDefinition Height="20*" MaxHeight="20" MinHeight="20"/>
            <RowDefinition Height="125*" />
            <RowDefinition Height="20*" MaxHeight="20" MinHeight="20"/>
            <RowDefinition Height="125*" />
            <RowDefinition Height="10*" />
        </Grid.RowDefinitions>

        <tb:TaskbarIcon IconSource="pack://application:,,,/MainIcon.ico" DoubleClickCommand="{Binding Commands.ShowMainWindow}" DoubleClickCommandParameter="{Binding RelativeSource={RelativeSource Self}}">
            <tb:TaskbarIcon.TrayToolTip>
                <ToolTip Style="{x:Null}" >
                    <TextBlock Text="VNDBUpdater" Style="{x:Null}" FontSize="11"/>
                </ToolTip>
            </tb:TaskbarIcon.TrayToolTip>
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu >
                    <MenuItem Header="Close" Command="{Binding Commands.CloseWindow}" />
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>

        <Menu Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" Grid.ColumnSpan="3">
            <MenuItem Header="File">
                <MenuItem Header="Add Visual Novels" Command="{Binding Commands.AddVisualNovels}" />
                <MenuItem Header="Update Visual Novels" Command="{Binding Commands.RefreshVisualNovels}" />
                <MenuItem Header="Synchronize with VNDB" Command="{Binding Commands.SynchronizeWithVNDB}" />
            </MenuItem>
            <MenuItem Header="Filter">
                <MenuItem Header="Create Filter" Command="{Binding Commands.AddFilter}"/>
                <MenuItem Header="Apply Filter" ItemsSource="{Binding AvailableFilters}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Command" Value="{Binding DataContext.Commands.ApplyFilter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="Delete Filters" ItemsSource="{Binding AvailableFilters}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Command" Value="{Binding DataContext.Commands.DeleteFilter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="Reset Filters" Command="{Binding Commands.ResetFilters}" />
            </MenuItem>
            <MenuItem Header="Options" Command="{Binding Commands.OpenOptions}" />
            <MenuItem Header="About" Command="{Binding Commands.About}" />
        </Menu>

        <TabControl Grid.Row="1" Grid.Column="0" Grid.RowSpan="1" SelectedIndex="{Binding Path=SelectedVisualNovelTab}" HorizontalAlignment="Left" VerticalAlignment="Top" ItemsSource="{Binding Path=Categories}"/>
        <DataGrid ItemsSource="{Binding Path=VisualNovelsInGrid, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding Path=SelectedVisualNovel}" 
                  Grid.Row="2" Grid.RowSpan="3" Grid.Column="0"  AutoGenerateColumns="False" CanUserAddRows="False" GridLinesVisibility="None" 
                  BorderThickness="0" CanUserResizeRows="False" CanUserDeleteRows="False" RowHeaderWidth="0" SelectionMode="Single" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" AlternationCount="1">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name" Binding="{Binding Path=Basics.VNDBInformation.title}" IsReadOnly="True" Width="5*" />
                <DataGridTextColumn Header="Original Name" Binding="{Binding Path=Basics.VNDBInformation.original}" IsReadOnly="True" Width="1*" Visibility="{Binding Source={StaticResource MainViewM}, Path=OriginalNameVisible, Mode=OneWay, BindsDirectlyToSource=True}" />
                <DataGridTextColumn Header="VNDB Score" Binding="{Binding Path=Basics.VNDBInformation.rating}" IsReadOnly="True" Width="2*" Visibility="{Binding Source={StaticResource MainViewM}, Path=VNDBScoreVisible, Mode=OneWay}" />
                <DataGridTextColumn Header="VNDB Popularity" Binding="{Binding Path=Basics.VNDBInformation.popularity}" IsReadOnly="True" Width="2*" Visibility="{Binding Source={StaticResource MainViewM}, Path=VNDBPopularityVisible, Mode=OneWay}"/>
                <DataGridTextColumn Header="Own Score" Binding="{Binding Path=ScoreInDouble}" IsReadOnly="True" Width="2*"/>
            </DataGrid.Columns>
            <DataGrid.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightBlue"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightBlue"/>
            </DataGrid.Resources>
            <DataGrid.ContextMenu>
                <ContextMenu Name="MainMenu">
                    <MenuItem Header="Start Game" Command="{Binding Commands.StartVisualNovel}" />
                    <MenuItem Header="Open Folder" Command="{Binding Commands.OpenVisualNovelFolder}" />
                    <MenuItem Header="Set Exe Path" Command="{Binding Commands.SetExePath}" CommandParameter="{Binding Path=SelectedVisualNovel}" />
                    <Separator HorizontalAlignment="Stretch" />
                    <MenuItem Header="Open walkthrough" Command="{Binding Commands.OpenWalkthrough}" />
                    <MenuItem Header="Create walkthrough" Command="{Binding Commands.CreateWalkthrough}" />
                    <Separator HorizontalAlignment="Stretch" />
                    <MenuItem Header="View on 'VNDB'" Command="{Binding Commands.ViewVisualNovelOnVNDB}" />
                    <MenuItem Header="Update" Command="{Binding Commands.UpdateVisualNovel}" />
                    <MenuItem Header="Delete Visual Novel" Command="{Binding Commands.DeleteVisualNovel}" />
                    <Separator HorizontalAlignment="Stretch" />
                    <MenuItem ItemContainerStyle="{StaticResource ContextMenuItemStyle}" Header="Related Visual Novels" ItemsSource="{Binding RelatedVisualNovels}" />
                    <Separator HorizontalAlignment="Stretch" />
                    <MenuItem Header="Set as" ItemsSource="{Binding Path=Categories}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Command" Value="{Binding DataContext.Commands.SetCategory, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="Search on Goolge">
                        <MenuItem Header="Walkthrough" Command="{Binding Commands.SearchOnGoogle}" CommandParameter="Walkthrough" />
                        <MenuItem Header="Savegame" Command="{Binding Commands.SearchOnGoogle}" CommandParameter="Savegame" />
                    </MenuItem>
                    <MenuItem Header="Set Score" ItemsSource="{Binding Path=Scores}">
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Command" Value="{Binding DataContext.Commands.SetScore, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type MenuItem}}}" />
                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=Header}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="Set Custom Score" Command="{Binding Commands.SetCustomScore}" />
                </ContextMenu>
            </DataGrid.ContextMenu>
        </DataGrid>

        <Image Source="{Binding Path=SelectedVisualNovel.Basics.MainThumb}" Stretch="{Binding Path=StretchImages}" Grid.Column="1" Grid.Row="2" Margin="2" />

        <ScrollViewer Grid.Column="2" Grid.Row="2" Margin="2">
            <StackPanel>
                <TextBlock>
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{}Aliases:&#x09;&#x09;{0}&#x0a;&#x0a;Length:&#x09;&#x09;{1}&#x0a;&#x0a;Released:&#x09;{2}&#x0a;&#x0a;Related VNs:&#x09;{3}&#x0a;&#x0a;Playtime: &#x09;{4}&#x0a;&#x0a;">
                            <Binding Path="SelectedVisualNovel.Basics.VNDBInformation.aliases" Converter="{StaticResource AliasesConverter }" />
                            <Binding Path="SelectedVisualNovel.Basics.Length" Mode="OneWay"/>
                            <Binding Path="SelectedVisualNovel.Basics.VNDBInformation.released" />
                            <Binding Path="SelectedVisualNovel.Basics.VNDBInformation.relations" Converter="{StaticResource RelationsConverter}" />
                            <Binding Path="SelectedVisualNovel.Playtime" Converter="{StaticResource PlayTimeConverter}"/>
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
                <RichTextBox Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" BorderThickness="0" converters:HtmlRichTextBoxBehavior.Text="{Binding Path=SelectedVisualNovel.Basics.Description}"/>
            </StackPanel>
        </ScrollViewer>

        <TabControl Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" SelectedIndex="{Binding Path=SelectedSubTab}" HorizontalAlignment="Left" VerticalAlignment="Top">
            <TabItem Header="Tags"/>
            <TabItem Header="Screenshots" />
            <TabItem Header="Characters" />
        </TabControl>

        <Grid Grid.Column="1" Grid.Row="4" Grid.ColumnSpan="2" Visibility="{Binding Path=ScreenshotTabVisibility}" Margin="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="18*" MinWidth="30" MaxWidth="30"/>
                <ColumnDefinition Width="30*"/>
                <ColumnDefinition Width="18*" MinWidth="30" MaxWidth="30"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="20*"/>
                <RowDefinition Height="10*" MinHeight="30" MaxHeight="30"/>
                <RowDefinition Height="20*"/>
            </Grid.RowDefinitions>

            <Image Grid.Column="1" Grid.RowSpan="3" Source="{Binding Path=SelectedScreenshot.image}" Stretch="{Binding Path=StretchImages}" />
            <Button Content="4" Grid.Column="2" Grid.Row="1" FontFamily="Marlett" Command="{Binding Commands.NextScreenshot}" Margin="0,0,0,2"/>
            <Button Content="3" Grid.Row="1" FontFamily="Marlett" Command="{Binding Commands.PreviousScreenshot}" Margin="2,0,0,0"/>
        </Grid>
        
        <Grid Grid.Column="1" Grid.Row="4" Grid.ColumnSpan="2" Visibility="{Binding Path=CharacterTabVisibility}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="18*" MinWidth="30" MaxWidth="30"/>
                <ColumnDefinition Width="30*"/>
                <ColumnDefinition Width="18*" MinWidth="30" MaxWidth="30"/>
                <ColumnDefinition Width="40*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="20*"/>
                <RowDefinition Height="10*" MinHeight="30" MaxHeight="30"/>
                <RowDefinition Height="20*"/>
            </Grid.RowDefinitions>

            <Image Grid.Column="1" Grid.RowSpan="3" Source="{Binding Path=SelectedCharacter.VNDBInformation.image}" Stretch="{Binding Path=StretchImages}" />
            <Button Content="4" Grid.Column="2" Grid.Row="1" FontFamily="Marlett" Command="{Binding Commands.NextCharacter}" Margin="0,0,0,2" />
            <Button Content="3" Grid.Row="1" FontFamily="Marlett" Command="{Binding Commands.PreviousCharacter}" Margin="2,0,0,0"/>

            <ScrollViewer Grid.Column="3" Grid.RowSpan="3" Margin="5,0,0,0">
                <StackPanel>
                    <TextBlock TextWrapping="Wrap">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="{}{0}&#x0a;&#x0a;{1}">
                                <Binding Path="SelectedCharacter.VNDBInformation.name" />
                                <Binding Path="SelectedCharacter.ConvertedTraits" Converter="{StaticResource TraitsListToStringConvert}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <RichTextBox Grid.Column="1" Grid.Row="2" IsReadOnly="True" BorderThickness="0" Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" VerticalScrollBarVisibility="Auto" converters:HtmlRichTextBoxBehavior.Text="{Binding Path=SelectedCharacter.Description}"/>
                </StackPanel>
            </ScrollViewer>
        </Grid>

        <Grid Grid.Column="1" Grid.Row="4" Grid.ColumnSpan="2" Visibility="{Binding Path=TagTabVisibility}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="100*"/>
                <ColumnDefinition Width="100*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="20*" MaxHeight="20" MinHeight="20" />
                <RowDefinition Height="20*"/>
            </Grid.RowDefinitions>

            <TabControl SelectedIndex="{Binding SelectedTagTab}" ItemsSource="{Binding Path=TagCategories}" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <DataGrid ItemsSource="{Binding Path=TagsInGrid, UpdateSourceTrigger=PropertyChanged}" Grid.Row="1" CanUserAddRows="False" GridLinesVisibility="None" BorderThickness="0"
                      AutoGenerateColumns="False" ScrollViewer.VerticalScrollBarVisibility="Visible" CanUserResizeRows="False" CanUserDeleteRows="False" RowHeaderWidth="0" SelectionMode="Single"
                      Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" SelectedItem="{Binding Path=SelectedTag}">
                <DataGrid.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightBlue"/>
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="LightBlue"/>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Tag" Binding="{Binding Path=Name}" IsReadOnly="True" Width="*" />
                    <DataGridTextColumn Header="Score" Binding="{Binding Path=Score}" IsReadOnly="True" Selector.IsSelected="True"/>
                </DataGrid.Columns>
            </DataGrid>
            <RichTextBox Grid.Column="1" Grid.Row="2" IsReadOnly="True" BorderThickness="0" Background="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" VerticalScrollBarVisibility="Auto" converters:HtmlRichTextBoxBehavior.Text="{Binding Path=SelectedTag.Description}"/>
        </Grid>

        <StatusBar Grid.Row="5" Grid.ColumnSpan="3">
            <StatusBarItem HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                <Grid>
                    <ProgressBar Minimum="0" Maximum="{Binding Path=CurrentPendingTasks}" Value="{Binding Path=CompletedPendingTasks}" Height="20" HorizontalAlignment="Stretch" Style="{DynamicResource ProgressBarStyle}" OverridesDefaultStyle="True" Foreground="{DynamicResource ProgressBarBackgroundBrush}" Background="{x:Null}"/>
                    <TextBlock Text="{Binding Path=StatusText}" HorizontalAlignment="Center"/>
                </Grid>
            </StatusBarItem>
        </StatusBar>

    </Grid>
</Window>
